import math

""" ########################
##  SCIENTIFIC CONSTANTS  ##
######################## """

# determines rate of thermal radiation
Stefan_Boltzman_constant = 5.6703*pow(10, -8)


""" ########################
#####  WORLD SETTINGS  #####
######################## """

""" world size """
# circumference of world (km)
# 40000 = earth
world_circumference = 40000
# radius of world
world_radius = world_circumference/(1*math.pi)
# how wide is the world (in cells)
# this absolutely needs to be a power of 2!
world_cell_width = pow(2, 7)
# how tall is the world (in cells)
# this absolutely needs to be a power of 2!
world_cell_height = pow(2, 7)
# how big is each cell? (in km)
cell_size = world_circumference/world_cell_width
# total water volume (km^3)
# 1386000000 = earth
total_water_volume = 1386000000

""" world shape """
# how smooth is the world
# the buffer sets a value at which different areas will tend to have similar heights
# a high value will produce things like plateaus
# for a chaotic world set the buffer to -5
# the units are distances in cells
smoothness_buffer = 10
# the rate affects the increase in independce of different areas as their distance increases
# though change might not be obvious at first if the buffer is high
# it is unitless and ranges from 0 to +inf
# for a smooth world set the rate to 0
smoothness_rate = 1
# tallest possible ground height (km)
# must be > 0
max_ground_height = 10
# lowest possible ground height (km)
# must be < 0
min_ground_height = -10
# how are random ground heights generated? beta_a and beta_b are the two parameters of a beta distribution
# a=b=1 -> uniform
# a=b > 1 -> increasingly normal
# a=b < 1 -> u-shaped
# a > b -> negative skew
# b>a -> positive skew
beta_a = 1.2
beta_b = 4

""" world energy budgets """
# initial temp (K) (273 = 0C)
initial_temperature = 283
# radiation rate (1 = black body, 0 = none)
thermal_radiation_rate = 0.0005
# thermal energy lost per day (kJ per cell per day per kelvin)
thermal_energy_radiated_per_day_per_kelvin = thermal_radiation_rate*(Stefan_Boltzman_constant*pow(cell_size*1000, 2)*60*60*24)
# rate of core energy production (kJ per cell per day)
thermal_energy_from_core_per_day_per_cell = 4.1*pow(10, 15)/(world_cell_height*world_cell_width)

""" atmosphere settings """
# what proportion of the suns energy bounces off the atmosphere?
atmosphere_albedo = 0.3
# how thick is the atmosphere (km)
atmophere_thickness = 20
# density of air (kg per km^3)
density_of_atmosphere = 1.225*pow(10, 9)
# atmosphere mass per cell (kg)
atmosphere_mass_per_cell = pow(cell_size, 2)*atmophere_thickness*density_of_atmosphere
# atmosphere thermal inertia (kJ per kg per K)
atmosphere_heat_constant = 1

""" weather settings """
# how much wind is generated by what temp difference?
wind_per_degree_difference = 1.0


""" sun properties """
# how much energy does the sun produce per day (kJ/day)
sun_total_daily_energy = 3.3*pow(10, 28)
# how far away is the sun (in km, 150000000 is true value)
sun_distance = 150000000*1
# how much energy could a cell possible receive (kJ/day)
# do not change, this is entirely determined by the above
max_solar_energy_per_cell = pow(cell_size, 2)/(4*math.pi*pow(sun_distance, 2))*sun_total_daily_energy


""" ########################
######  MAP SETTINGS  ######
######################## """

# width of map in px
map_width = 750
# height of map in px
map_height = 750
# width of border around map in px
map_border = 0
# size of each cell
cell_height = map_height/float(world_cell_height)
cell_width = map_width/float(world_cell_width)
# boolean, draw water?
draw_water = True
# what mode are we drawing
draw_mode = "terrain"
# draw a border around coastlines?
draw_coast = True
# width of border around coastlines
coast_width = 2.0
# color of border around coastlines
coast_color = "black"
